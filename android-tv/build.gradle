apply plugin: 'com.android.application'


def computeVersionCode() {
    return appVersionCode;
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        applicationId "sagex.miniclient.android.tv"
        minSdkVersion 17
        targetSdkVersion androidTargetSdkVersion
        // versionCode API (2 digits), SCREEN (2 digits), VERSION (3 digits)
        versionCode computeVersionCode()
        versionName "${appVersionName}"
    }

    signingConfigs {
        release {
            keyAlias = "sagetv-miniclient-tv"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    if (System.getenv("AEA_STORE_FILE") &&
            System.getenv("AEA_STORE_PASSWORD") &&
            System.getenv("AEA_MINICLIENT_KEY_PASSWORD")) {
        signingConfigs.release.storeFile = file(System.getenv("AEA_STORE_FILE"))
        signingConfigs.release.storePassword = System.getenv("AEA_STORE_PASSWORD")
        signingConfigs.release.keyPassword = System.getenv("AEA_MINICLIENT_KEY_PASSWORD")
    } else {
        System.out.println("NEED TO SET AEA_STORE_FILE, AEA_STORE_PASSWORD, AEA_MINICLIENT_KEY_PASSWORD to sign app");
        buildTypes.release.signingConfig = null
    }


//    dataBinding {
//        enabled = true
//    }
}



dependencies {
    compile project(":android-shared")
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:recyclerview-v7:${androidExtrasVer}"
    compile "com.android.support:leanback-v17:${androidExtrasVer}"
    compile "com.android.support:appcompat-v7:${androidExtrasVer}"
    compile "com.github.bumptech.glide:glide:3.4.+"
}

clean {
    delete '../build', 'android-phone-release.apk', 'android-tv-release.apk'
}